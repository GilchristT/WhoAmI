server {
    listen 8080;
    location / {
        default_type text/html;
        content_by_lua_block {

            function getHeaderValue(table,key)
                if table[key] ~= nil then
                    return table[key]
                else
                    return "Header not present"
                end
            end

            local htmlStyle = "<style> table {border-collapse:collapse;border-spacing:0;}"
            local htmlStyle = htmlStyle .. "th {background-color:#efefef;text-align:left;}"
            local htmlStyle = htmlStyle .. "table, td, th {border:1px solid black;font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;} </style>"
            ngx.say(htmlStyle)

            local h = ngx.req.get_headers()
            local htmlString = "<table><tr><th>Header</th><th>Value</th></tr>"
            local myValue = "N/A"
            htmlString = htmlString .. "<tr><td>Requested URL</td><td>" .. getHeaderValue(h,"host") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>Source IP Address</td><td>" .. getHeaderValue(h,"x-forwarded-for") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>ISO Country Code</td><td>" .. getHeaderValue(h,"x-iso-countrycode") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>ISO Country Name</td><td>" .. getHeaderValue(h,"x-iso-countryname") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>Routed via Load Balancer</td><td>" .. getHeaderValue(h,"x-haproxy-hostname") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>HAProxy Frontend Used</td><td>" .. getHeaderValue(h,"x-haproxy-frontend") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>HAProxy Backend Used</td><td>" .. getHeaderValue(h,"x-haproxy-backend") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>HAProxy Target Server</td><td>" .. getHeaderValue(h,"x-haproxy-target-server") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>User Agent String</td><td>" .. getHeaderValue(h,"user-agent") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>SSL/TLS Version Used</td><td>" .. getHeaderValue(h,"x-tlsversion") .. "</td></tr>"
            htmlString = htmlString .. "<tr><td>SSL/TLS Cipher Used</td><td>" .. getHeaderValue(h,"x-tlscipher") .. "</td></tr>"
            if getHeaderValue(h,"x-ssl-client-cert-used") == "1" then
                local sslVerifyResult = ""
                if getHeaderValue(h,"x-ssl-client-verify") == "0" then sslVerifyResult = "Certificate is valid (0)"
                elseif getHeaderValue(h,"x-ssl-client-verify") == "10" then sslVerifyResult = "Certificate has expired (10)"
                elseif getHeaderValue(h,"x-ssl-client-verify") == "23" then sslVerifyResult = "Certificate has been revoked (23)"
                else sslVerifyResult = "Unknown certificate error (" .. getHeaderValue(h,"x-ssl-client-verify") .. ")"
                end

                htmlString = htmlString .. "<tr><td>SSL Client Certificate presented</td><td>True</td></tr>"
                htmlString = htmlString .. "<tr><td>Certificate CN</td><td>" .. getHeaderValue(h,"x-ssl-client-cn") .. "</td></tr>"
                htmlString = htmlString .. "<tr><td>Certificate Issuer</td><td>" .. getHeaderValue(h,"x-ssl-issuer-cn") .. "</td></tr>"
                htmlString = htmlString .. "<tr><td>Certificate Verify Result</td><td>" .. sslVerifyResult .. "</td></tr>"
                htmlString = htmlString .. "<tr><td>Certificate Serial</td><td>" .. getHeaderValue(h,"x-ssl-client-serial") .. "</td></tr>"
            else
                htmlString = htmlString .. "<tr><td>SSL Client Certificate presented</td><td>False</td></tr>"
            end
            htmlString = htmlString .. "</table>"
            ngx.say(htmlString)
        }
    }
    location /allheaders {
        default_type text/html;
        content_by_lua_block {
            local htmlStyle = "<style> table {border-collapse:collapse;border-spacing:0;}"
            local htmlStyle = htmlStyle .. "th {background-color:#efefef;text-align:left;}"
            local htmlStyle = htmlStyle .. "table, td, th {border:1px solid black;font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;} </style>"
            ngx.say(htmlStyle)
            local htmlString = "<table><tr><th>Header</th><th>Value</th></tr>"

            local h = ngx.req.get_headers()
            for k, v in pairs(h) do
                htmlString = htmlString .. "<tr><td>" .. k .. "</td><td>" .. v .. "</td></tr>"
            end
            htmlString = htmlString .. "</table>"
            ngx.say(htmlString)
        }
    }
        location /text {
        default_type text/html;
        content_by_lua_block {
            local htmlString = ""

            local h = ngx.req.get_headers()
            for k, v in pairs(h) do
                htmlString = htmlString .. k .. " - " .. v .. "\r\n"
            end

            ngx.say(htmlString)
        }
    }
}

